{"ast":null,"code":"import _asyncToGenerator from \"/Users/nipunhedaoo/Documents/GitHub/Team_CodeBlooded_SOEN6011_Summer2023/career-service-app-client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { ToastrService } from 'ngx-toastr';\nimport { BrowseJobsComponent } from './browse-jobs.component';\nimport { BrowseJobsService } from './browse-jobs.service';\nimport { AppliedJobsService } from '../applied-jobs/applied-jobs.service';\nimport { FormBuilder } from '@angular/forms';\nimport { of } from 'rxjs';\ndescribe('BrowseJobsComponent', () => {\n  let component;\n  let fixture;\n  let toastrService;\n  let browseJobsService;\n  let appliedJobsService;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    const browseJobsSpy = jasmine.createSpyObj('BrowseJobsService', ['getAllJobs']);\n    const appliedJobsSpy = jasmine.createSpyObj('AppliedJobsService', ['getEmployer']);\n    yield TestBed.configureTestingModule({\n      declarations: [BrowseJobsComponent],\n      imports: [RouterTestingModule],\n      providers: [FormBuilder, ToastrService, {\n        provide: BrowseJobsService,\n        useValue: browseJobsSpy\n      }, {\n        provide: AppliedJobsService,\n        useValue: appliedJobsSpy\n      }]\n    }).compileComponents();\n    browseJobsService = TestBed.inject(BrowseJobsService);\n    appliedJobsService = TestBed.inject(AppliedJobsService);\n    fixture = TestBed.createComponent(BrowseJobsComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  }); // it('should handle fetching jobs on initialization', () => {\n  //   const mockEmployer: Employer = {\n  //     companyName: 'Example Company',\n  //     website: 'example.com',\n  //     email: 'employer@example.com'\n  //   };\n  //   const mockJob: Job = {\n  //     id: '123',\n  //     position: 'Software Developer',\n  //     description: 'Description',\n  //     location: 'Location',\n  //     requirements: 'Requirements',\n  //     employer: mockEmployer\n  //   };\n  //   browseJobsService.getAllJobs.and.returnValue(of({ content: [mockJob] }));\n  //   appliedJobsService.getEmployer.and.returnValue(of(mockEmployer));\n  //   component.ngOnInit();\n  //   expect(component.allJobsList).toEqual([\n  //     {\n  //       id: mockJob.id,\n  //       position: mockJob.position,\n  //       description: mockJob.description,\n  //       location: mockJob.location,\n  //       requirements: mockJob.requirements,\n  //       employer: mockEmployer,\n  //     },\n  //   ]);\n  // });\n\n  it('should filter jobs by attribute', () => {\n    var _a, _b;\n\n    const mockEmployer = {\n      companyName: 'Example Company',\n      website: 'example.com',\n      email: 'employer@example.com'\n    };\n    const mockJob = {\n      id: '123',\n      position: 'Software Developer',\n      description: 'Description',\n      location: 'Location',\n      requirements: 'Requirements',\n      employer: mockEmployer\n    };\n    component.allJobsListOriginal = [mockJob];\n    component.allJobsList = [mockJob];\n    (_a = component.searchForm.get('filterAttribute')) === null || _a === void 0 ? void 0 : _a.setValue('position');\n    (_b = component.searchForm.get('searchKeyword')) === null || _b === void 0 ? void 0 : _b.setValue('Software');\n    component.onSearchInputChange();\n    expect(component.allJobsList).toEqual([mockJob]);\n  });\n  it('should apply to a job', () => {\n    const mockJobId = '123';\n    browseJobsService.isResumeExists.and.returnValue(of(true));\n    browseJobsService.applyToJob.and.returnValue(of('Success'));\n    component.loggedUser = {\n      userId: '456'\n    };\n    component.applyToJob(mockJobId);\n    expect(browseJobsService.applyToJob).toHaveBeenCalledWith('456', '123');\n    expect(toastrService.success).toHaveBeenCalled();\n  });\n});","map":{"version":3,"sources":["/Users/nipunhedaoo/Documents/GitHub/Team_CodeBlooded_SOEN6011_Summer2023/career-service-app-client/src/app/browse-jobs/browse-jobs.component.spec.ts"],"names":["TestBed","RouterTestingModule","ToastrService","BrowseJobsComponent","BrowseJobsService","AppliedJobsService","FormBuilder","of","describe","component","fixture","toastrService","browseJobsService","appliedJobsService","beforeEach","browseJobsSpy","jasmine","createSpyObj","appliedJobsSpy","configureTestingModule","declarations","imports","providers","provide","useValue","compileComponents","inject","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","_a","_b","mockEmployer","companyName","website","email","mockJob","id","position","description","location","requirements","employer","allJobsListOriginal","allJobsList","searchForm","get","setValue","onSearchInputChange","toEqual","mockJobId","isResumeExists","and","returnValue","applyToJob","loggedUser","userId","toHaveBeenCalledWith","success","toHaveBeenCalled"],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { ToastrService } from 'ngx-toastr';\nimport { BrowseJobsComponent } from './browse-jobs.component';\nimport { BrowseJobsService } from './browse-jobs.service';\nimport { AppliedJobsService } from '../applied-jobs/applied-jobs.service';\nimport { FormBuilder } from '@angular/forms';\nimport { of } from 'rxjs';\ndescribe('BrowseJobsComponent', () => {\n    let component;\n    let fixture;\n    let toastrService;\n    let browseJobsService;\n    let appliedJobsService;\n    beforeEach(async () => {\n        const browseJobsSpy = jasmine.createSpyObj('BrowseJobsService', ['getAllJobs']);\n        const appliedJobsSpy = jasmine.createSpyObj('AppliedJobsService', ['getEmployer']);\n        await TestBed.configureTestingModule({\n            declarations: [BrowseJobsComponent],\n            imports: [RouterTestingModule],\n            providers: [\n                FormBuilder,\n                ToastrService,\n                { provide: BrowseJobsService, useValue: browseJobsSpy },\n                { provide: AppliedJobsService, useValue: appliedJobsSpy },\n            ],\n        }).compileComponents();\n        browseJobsService = TestBed.inject(BrowseJobsService);\n        appliedJobsService = TestBed.inject(AppliedJobsService);\n        fixture = TestBed.createComponent(BrowseJobsComponent);\n        component = fixture.componentInstance;\n        fixture.detectChanges();\n    });\n    it('should create', () => {\n        expect(component).toBeTruthy();\n    });\n    // it('should handle fetching jobs on initialization', () => {\n    //   const mockEmployer: Employer = {\n    //     companyName: 'Example Company',\n    //     website: 'example.com',\n    //     email: 'employer@example.com'\n    //   };\n    //   const mockJob: Job = {\n    //     id: '123',\n    //     position: 'Software Developer',\n    //     description: 'Description',\n    //     location: 'Location',\n    //     requirements: 'Requirements',\n    //     employer: mockEmployer\n    //   };\n    //   browseJobsService.getAllJobs.and.returnValue(of({ content: [mockJob] }));\n    //   appliedJobsService.getEmployer.and.returnValue(of(mockEmployer));\n    //   component.ngOnInit();\n    //   expect(component.allJobsList).toEqual([\n    //     {\n    //       id: mockJob.id,\n    //       position: mockJob.position,\n    //       description: mockJob.description,\n    //       location: mockJob.location,\n    //       requirements: mockJob.requirements,\n    //       employer: mockEmployer,\n    //     },\n    //   ]);\n    // });\n    it('should filter jobs by attribute', () => {\n        var _a, _b;\n        const mockEmployer = {\n            companyName: 'Example Company',\n            website: 'example.com',\n            email: 'employer@example.com'\n        };\n        const mockJob = {\n            id: '123',\n            position: 'Software Developer',\n            description: 'Description',\n            location: 'Location',\n            requirements: 'Requirements',\n            employer: mockEmployer\n        };\n        component.allJobsListOriginal = [mockJob];\n        component.allJobsList = [mockJob];\n        (_a = component.searchForm.get('filterAttribute')) === null || _a === void 0 ? void 0 : _a.setValue('position');\n        (_b = component.searchForm.get('searchKeyword')) === null || _b === void 0 ? void 0 : _b.setValue('Software');\n        component.onSearchInputChange();\n        expect(component.allJobsList).toEqual([mockJob]);\n    });\n    it('should apply to a job', () => {\n        const mockJobId = '123';\n        browseJobsService.isResumeExists.and.returnValue(of(true));\n        browseJobsService.applyToJob.and.returnValue(of('Success'));\n        component.loggedUser = { userId: '456' };\n        component.applyToJob(mockJobId);\n        expect(browseJobsService.applyToJob).toHaveBeenCalledWith('456', '123');\n        expect(toastrService.success).toHaveBeenCalled();\n    });\n});\n"]},"metadata":{},"sourceType":"module"}