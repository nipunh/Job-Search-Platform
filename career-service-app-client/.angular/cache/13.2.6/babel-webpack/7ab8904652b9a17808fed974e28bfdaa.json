{"ast":null,"code":"import _asyncToGenerator from \"/Users/nipunhedaoo/Documents/GitHub/Team_CodeBlooded_SOEN6011_Summer2023/career-service-app-client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { ToastrService } from 'ngx-toastr';\nimport { BrowseJobsComponent } from './browse-jobs.component';\nimport { BrowseJobsService } from './browse-jobs.service';\nimport { AppliedJobsService } from '../applied-jobs/applied-jobs.service';\nimport { FormBuilder } from '@angular/forms';\nimport { of, throwError } from 'rxjs';\ndescribe('BrowseJobsComponent', () => {\n  let component;\n  let fixture;\n  let toastrService;\n  let browseJobsService;\n  let appliedJobsService;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    const browseJobsSpy = jasmine.createSpyObj('BrowseJobsService', ['getAllJobs']);\n    const appliedJobsSpy = jasmine.createSpyObj('AppliedJobsService', ['getEmployer']);\n    yield TestBed.configureTestingModule({\n      declarations: [BrowseJobsComponent],\n      imports: [RouterTestingModule],\n      providers: [FormBuilder, ToastrService, {\n        provide: BrowseJobsService,\n        useValue: browseJobsSpy\n      }, {\n        provide: AppliedJobsService,\n        useValue: appliedJobsSpy\n      }]\n    }).compileComponents();\n    browseJobsService = TestBed.inject(BrowseJobsService);\n    appliedJobsService = TestBed.inject(AppliedJobsService);\n    fixture = TestBed.createComponent(BrowseJobsComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  }); // it('should handle fetching jobs on initialization', () => {\n  //   const mockEmployer: Employer = {\n  //     companyName: 'Example Company',\n  //     website: 'example.com',\n  //     email: 'employer@example.com'\n  //   };\n  //   const mockJob: Job = {\n  //     id: '123',\n  //     position: 'Software Developer',\n  //     description: 'Description',\n  //     location: 'Location',\n  //     requirements: 'Requirements',\n  //     employer: mockEmployer\n  //   };\n  //   browseJobsService.getAllJobs.and.returnValue(of({ content: [mockJob] }));\n  //   appliedJobsService.getEmployer.and.returnValue(of(mockEmployer));\n  //   component.ngOnInit();\n  //   expect(component.allJobsList).toEqual([\n  //     {\n  //       id: mockJob.id,\n  //       position: mockJob.position,\n  //       description: mockJob.description,\n  //       location: mockJob.location,\n  //       requirements: mockJob.requirements,\n  //       employer: mockEmployer,\n  //     },\n  //   ]);\n  // });\n  // it('should handle fetching jobs failure on initialization', () => {\n  //   browseJobsService.getAllJobs.and.returnValue(throwError('Error'));\n  //   spyOn(component['_router'], 'navigateByUrl');\n  //   component.ngOnInit();\n  //   expect(toastrService.error).toHaveBeenCalled();\n  //   expect(component['_router'].navigateByUrl).toHaveBeenCalledWith('/home');\n  // });\n  // it('should filter jobs by attribute', () => {\n  //   const mockEmployer: Employer = {\n  //     companyName: 'Example Company',\n  //     website: 'example.com',\n  //     email: 'employer@example.com'\n  //   };\n  //   const mockJob: Job = {\n  //     id: '123',\n  //     position: 'Software Developer',\n  //     description: 'Description',\n  //     location: 'Location',\n  //     requirements: 'Requirements',\n  //     employer: mockEmployer\n  //   };\n  //   component.allJobsListOriginal = [mockJob];\n  //   component.allJobsList = [mockJob];\n  //   component.searchForm.get('filterAttribute')?.setValue('position');\n  //   component.searchForm.get('searchKeyword')?.setValue('Software');\n  //   component.onSearchInputChange();\n  //   expect(component.allJobsList).toEqual([mockJob]);\n  // });\n\n  it('should apply to a job', () => {\n    const mockJobId = '123';\n    browseJobsService.isResumeExists.and.returnValue(of(true));\n    browseJobsService.applyToJob.and.returnValue(of('Success'));\n    component.loggedUser = {\n      userId: '456'\n    };\n    component.applyToJob(mockJobId);\n    expect(browseJobsService.applyToJob).toHaveBeenCalledWith('456', '123');\n    expect(toastrService.success).toHaveBeenCalled();\n  });\n  it('should handle apply to job failure', () => {\n    const mockJobId = '123';\n    browseJobsService.isResumeExists.and.returnValue(of(true));\n    browseJobsService.applyToJob.and.returnValue(throwError('Error'));\n    component.loggedUser = {\n      userId: '456'\n    };\n    component.applyToJob(mockJobId);\n    expect(browseJobsService.applyToJob).toHaveBeenCalledWith('456', '123');\n    expect(toastrServiceSpy).toHaveBeenCalled();\n  });\n});","map":{"version":3,"sources":["/Users/nipunhedaoo/Documents/GitHub/Team_CodeBlooded_SOEN6011_Summer2023/career-service-app-client/src/app/browse-jobs/browse-jobs.component.spec.ts"],"names":["TestBed","RouterTestingModule","ToastrService","BrowseJobsComponent","BrowseJobsService","AppliedJobsService","FormBuilder","of","throwError","describe","component","fixture","toastrService","browseJobsService","appliedJobsService","beforeEach","browseJobsSpy","jasmine","createSpyObj","appliedJobsSpy","configureTestingModule","declarations","imports","providers","provide","useValue","compileComponents","inject","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","mockJobId","isResumeExists","and","returnValue","applyToJob","loggedUser","userId","toHaveBeenCalledWith","success","toHaveBeenCalled","toastrServiceSpy"],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { ToastrService } from 'ngx-toastr';\nimport { BrowseJobsComponent } from './browse-jobs.component';\nimport { BrowseJobsService } from './browse-jobs.service';\nimport { AppliedJobsService } from '../applied-jobs/applied-jobs.service';\nimport { FormBuilder } from '@angular/forms';\nimport { of, throwError } from 'rxjs';\ndescribe('BrowseJobsComponent', () => {\n    let component;\n    let fixture;\n    let toastrService;\n    let browseJobsService;\n    let appliedJobsService;\n    beforeEach(async () => {\n        const browseJobsSpy = jasmine.createSpyObj('BrowseJobsService', ['getAllJobs']);\n        const appliedJobsSpy = jasmine.createSpyObj('AppliedJobsService', ['getEmployer']);\n        await TestBed.configureTestingModule({\n            declarations: [BrowseJobsComponent],\n            imports: [RouterTestingModule],\n            providers: [\n                FormBuilder,\n                ToastrService,\n                { provide: BrowseJobsService, useValue: browseJobsSpy },\n                { provide: AppliedJobsService, useValue: appliedJobsSpy },\n            ],\n        }).compileComponents();\n        browseJobsService = TestBed.inject(BrowseJobsService);\n        appliedJobsService = TestBed.inject(AppliedJobsService);\n        fixture = TestBed.createComponent(BrowseJobsComponent);\n        component = fixture.componentInstance;\n        fixture.detectChanges();\n    });\n    it('should create', () => {\n        expect(component).toBeTruthy();\n    });\n    // it('should handle fetching jobs on initialization', () => {\n    //   const mockEmployer: Employer = {\n    //     companyName: 'Example Company',\n    //     website: 'example.com',\n    //     email: 'employer@example.com'\n    //   };\n    //   const mockJob: Job = {\n    //     id: '123',\n    //     position: 'Software Developer',\n    //     description: 'Description',\n    //     location: 'Location',\n    //     requirements: 'Requirements',\n    //     employer: mockEmployer\n    //   };\n    //   browseJobsService.getAllJobs.and.returnValue(of({ content: [mockJob] }));\n    //   appliedJobsService.getEmployer.and.returnValue(of(mockEmployer));\n    //   component.ngOnInit();\n    //   expect(component.allJobsList).toEqual([\n    //     {\n    //       id: mockJob.id,\n    //       position: mockJob.position,\n    //       description: mockJob.description,\n    //       location: mockJob.location,\n    //       requirements: mockJob.requirements,\n    //       employer: mockEmployer,\n    //     },\n    //   ]);\n    // });\n    // it('should handle fetching jobs failure on initialization', () => {\n    //   browseJobsService.getAllJobs.and.returnValue(throwError('Error'));\n    //   spyOn(component['_router'], 'navigateByUrl');\n    //   component.ngOnInit();\n    //   expect(toastrService.error).toHaveBeenCalled();\n    //   expect(component['_router'].navigateByUrl).toHaveBeenCalledWith('/home');\n    // });\n    // it('should filter jobs by attribute', () => {\n    //   const mockEmployer: Employer = {\n    //     companyName: 'Example Company',\n    //     website: 'example.com',\n    //     email: 'employer@example.com'\n    //   };\n    //   const mockJob: Job = {\n    //     id: '123',\n    //     position: 'Software Developer',\n    //     description: 'Description',\n    //     location: 'Location',\n    //     requirements: 'Requirements',\n    //     employer: mockEmployer\n    //   };\n    //   component.allJobsListOriginal = [mockJob];\n    //   component.allJobsList = [mockJob];\n    //   component.searchForm.get('filterAttribute')?.setValue('position');\n    //   component.searchForm.get('searchKeyword')?.setValue('Software');\n    //   component.onSearchInputChange();\n    //   expect(component.allJobsList).toEqual([mockJob]);\n    // });\n    it('should apply to a job', () => {\n        const mockJobId = '123';\n        browseJobsService.isResumeExists.and.returnValue(of(true));\n        browseJobsService.applyToJob.and.returnValue(of('Success'));\n        component.loggedUser = { userId: '456' };\n        component.applyToJob(mockJobId);\n        expect(browseJobsService.applyToJob).toHaveBeenCalledWith('456', '123');\n        expect(toastrService.success).toHaveBeenCalled();\n    });\n    it('should handle apply to job failure', () => {\n        const mockJobId = '123';\n        browseJobsService.isResumeExists.and.returnValue(of(true));\n        browseJobsService.applyToJob.and.returnValue(throwError('Error'));\n        component.loggedUser = { userId: '456' };\n        component.applyToJob(mockJobId);\n        expect(browseJobsService.applyToJob).toHaveBeenCalledWith('456', '123');\n        expect(toastrServiceSpy).toHaveBeenCalled();\n    });\n});\n"]},"metadata":{},"sourceType":"module"}