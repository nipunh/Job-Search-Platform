{"ast":null,"code":"import _asyncToGenerator from \"/Users/nipunhedaoo/Documents/GitHub/Team_CodeBlooded_SOEN6011_Summer2023/career-service-app-client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { AppliedJobsComponent } from './applied-jobs.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { ToastrModule, ToastrService } from 'ngx-toastr';\nimport { AppliedJobsService } from './applied-jobs.service';\nimport { of } from 'rxjs';\ndescribe('AppliedJobsComponent', () => {\n  let component;\n  let fixture;\n  let appliedJobsService;\n  let toastrService;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    const appliedJobsServiceSpy = jasmine.createSpyObj('AppliedJobsService', ['getAllAppliedJobs', 'getEmployer', 'getJob']);\n    const toastrServiceSpy = jasmine.createSpyObj('ToastrService', ['error']);\n    yield TestBed.configureTestingModule({\n      imports: [ReactiveFormsModule, RouterTestingModule, HttpClientTestingModule, ToastrModule.forRoot()],\n      declarations: [AppliedJobsComponent],\n      providers: [{\n        provide: AppliedJobsService,\n        useValue: appliedJobsServiceSpy\n      }, {\n        provide: ToastrService,\n        useValue: toastrServiceSpy\n      }]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(AppliedJobsComponent);\n    component = fixture.componentInstance;\n    appliedJobsService = TestBed.inject(AppliedJobsService);\n    toastrService = TestBed.inject(ToastrService);\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should call appliedJobsService methods and populate appliedJobsList', () => {\n    const mockAppliedJobData = [{\n      id: '1',\n      employerId: 'employer1',\n      jobId: 'job1',\n      status: 'Applied'\n    }, {\n      id: '2',\n      employerId: 'employer2',\n      jobId: 'job2',\n      status: 'Shortlisted'\n    }];\n    const mockEmployerData = {\n      email: 'employer@example.com',\n      companyName: 'Example Corp',\n      website: 'example.com'\n    };\n    const mockJobData = {\n      description: 'Job description',\n      position: 'Software Developer',\n      requirements: 'Experience required'\n    };\n    appliedJobsService.getAllAppliedJobs.and.returnValue(of(mockAppliedJobData));\n    appliedJobsService.getEmployer.and.returnValue(of(mockEmployerData));\n    appliedJobsService.getJob.and.returnValue(of(mockJobData));\n    component.loggedUser = {\n      userId: 'user123'\n    };\n    component.ngOnInit();\n    expect(appliedJobsService.getAllAppliedJobs).toHaveBeenCalledWith('user123');\n    expect(appliedJobsService.getEmployer).toHaveBeenCalledTimes(mockAppliedJobData.length);\n    expect(appliedJobsService.getJob).toHaveBeenCalledTimes(mockAppliedJobData.length);\n  });\n});","map":{"version":3,"sources":["/Users/nipunhedaoo/Documents/GitHub/Team_CodeBlooded_SOEN6011_Summer2023/career-service-app-client/src/app/applied-jobs/applied-jobs.component.spec.ts"],"names":["TestBed","AppliedJobsComponent","ReactiveFormsModule","RouterTestingModule","HttpClientTestingModule","ToastrModule","ToastrService","AppliedJobsService","of","describe","component","fixture","appliedJobsService","toastrService","beforeEach","appliedJobsServiceSpy","jasmine","createSpyObj","toastrServiceSpy","configureTestingModule","imports","forRoot","declarations","providers","provide","useValue","compileComponents","createComponent","componentInstance","inject","it","expect","toBeTruthy","mockAppliedJobData","id","employerId","jobId","status","mockEmployerData","email","companyName","website","mockJobData","description","position","requirements","getAllAppliedJobs","and","returnValue","getEmployer","getJob","loggedUser","userId","ngOnInit","toHaveBeenCalledWith","toHaveBeenCalledTimes","length"],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { AppliedJobsComponent } from './applied-jobs.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { ToastrModule, ToastrService } from 'ngx-toastr';\nimport { AppliedJobsService } from './applied-jobs.service';\nimport { of } from 'rxjs';\ndescribe('AppliedJobsComponent', () => {\n    let component;\n    let fixture;\n    let appliedJobsService;\n    let toastrService;\n    beforeEach(async () => {\n        const appliedJobsServiceSpy = jasmine.createSpyObj('AppliedJobsService', [\n            'getAllAppliedJobs',\n            'getEmployer',\n            'getJob'\n        ]);\n        const toastrServiceSpy = jasmine.createSpyObj('ToastrService', ['error']);\n        await TestBed.configureTestingModule({\n            imports: [\n                ReactiveFormsModule,\n                RouterTestingModule,\n                HttpClientTestingModule,\n                ToastrModule.forRoot()\n            ],\n            declarations: [AppliedJobsComponent],\n            providers: [\n                { provide: AppliedJobsService, useValue: appliedJobsServiceSpy },\n                { provide: ToastrService, useValue: toastrServiceSpy }\n            ]\n        })\n            .compileComponents();\n    });\n    beforeEach(() => {\n        fixture = TestBed.createComponent(AppliedJobsComponent);\n        component = fixture.componentInstance;\n        appliedJobsService = TestBed.inject(AppliedJobsService);\n        toastrService = TestBed.inject(ToastrService);\n    });\n    it('should create', () => {\n        expect(component).toBeTruthy();\n    });\n    it('should call appliedJobsService methods and populate appliedJobsList', () => {\n        const mockAppliedJobData = [\n            { id: '1', employerId: 'employer1', jobId: 'job1', status: 'Applied' },\n            { id: '2', employerId: 'employer2', jobId: 'job2', status: 'Shortlisted' }\n        ];\n        const mockEmployerData = { email: 'employer@example.com', companyName: 'Example Corp', website: 'example.com' };\n        const mockJobData = { description: 'Job description', position: 'Software Developer', requirements: 'Experience required' };\n        appliedJobsService.getAllAppliedJobs.and.returnValue(of(mockAppliedJobData));\n        appliedJobsService.getEmployer.and.returnValue(of(mockEmployerData));\n        appliedJobsService.getJob.and.returnValue(of(mockJobData));\n        component.loggedUser = { userId: 'user123' };\n        component.ngOnInit();\n        expect(appliedJobsService.getAllAppliedJobs).toHaveBeenCalledWith('user123');\n        expect(appliedJobsService.getEmployer).toHaveBeenCalledTimes(mockAppliedJobData.length);\n        expect(appliedJobsService.getJob).toHaveBeenCalledTimes(mockAppliedJobData.length);\n    });\n});\n"]},"metadata":{},"sourceType":"module"}