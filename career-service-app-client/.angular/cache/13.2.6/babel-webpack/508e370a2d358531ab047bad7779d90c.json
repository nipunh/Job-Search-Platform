{"ast":null,"code":"import _asyncToGenerator from \"/Users/nipunhedaoo/Documents/GitHub/Team_CodeBlooded_SOEN6011_Summer2023/career-service-app-client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { EmployerJobsComponent } from './employer-job-posting.component';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { ToastrModule } from 'ngx-toastr';\nimport { EmployerService } from './employer-job-posting.service';\nimport { BrowseJobsService } from '../browse-jobs/browse-jobs.service';\nimport { Router } from '@angular/router';\nimport { of } from 'rxjs';\ndescribe('EmployerJobsComponent', () => {\n  let component;\n  let fixture;\n  let browseJobsService;\n  let employerService;\n  let router;\n  const toastrSpy = jasmine.createSpyObj('ToastrService', ['success', 'error']);\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule, RouterTestingModule, ToastrModule.forRoot()],\n      declarations: [EmployerJobsComponent]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(EmployerJobsComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  beforeEach(() => {\n    localStorage.setItem('user', JSON.stringify({\n      userId: '123',\n      email: 'test@example.com'\n    }));\n    fixture = TestBed.createComponent(EmployerJobsComponent);\n    component = fixture.componentInstance;\n    browseJobsService = TestBed.inject(BrowseJobsService);\n    employerService = TestBed.inject(EmployerService);\n    router = TestBed.inject(Router);\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should retrieve all jobs on ngOnInit', () => {\n    const mockJobs = {\n      content: [{\n        \"description\": \"Work with frontend team to develop a highly scalable web app\",\n        \"employerId\": \"64ad482c8eda5e12c342472e\",\n        \"id\": \"64b5b8d3507b801b549c690d\",\n        \"location\": \"Toronto / Montreal\",\n        \"position\": \"Backend engineer\",\n        \"requirements\": \"2+ years experience in any backend framework\"\n      }, {\n        \"description\": \"Immediately joining\",\n        \"employerId\": \"64ad482c8eda5e12c342472e\",\n        \"id\": \"64b68289c653ef350e8de5d8\",\n        \"location\": \"Toronto\",\n        \"position\": \"sde 3\",\n        \"requirements\": \"Java,AWS and CI/CD\"\n      }]\n    };\n    employerService.getEmployerJobPostings.and.returnValue(of(mockJobs));\n    component.ngOnInit();\n    expect(employerService.getEmployerJobPostings).toHaveBeenCalled();\n    expect(component.jobsList).toEqual(mockJobs.content);\n  }); // it('should show error toastr when getAllJobs API call fails', () => {\n  //   const errorMessage = 'API error';\n  //   browseJobsService.getAllJobs.and.returnValue(throwError({ message: errorMessage }));\n  //   component.ngOnInit();\n  //   expect(toastrSpy.error).toHaveBeenCalledWith('Error occured' + errorMessage);\n  // });\n  // it('should reset the search keyword and filter attribute on onFilterAttributeChange', () => {\n  //   component.searchForm.get('searchKeyword')?.setValue('searchValue');\n  //   component.onFilterAttributeChange();\n  //   expect(component.searchForm.get('searchKeyword')?.value).toBe('');\n  //   expect(component.jobsList).toEqual(component.jobsListOriginal);\n  // });\n  // it('should filter jobs on onSearchInputChange', () => {\n  //   const mockJobs = [{ id: 1, position: 'Job 1' }, { id: 2, position: 'Job 2' }];\n  //   component.jobsListOriginal = mockJobs;\n  //   component.onSearchInputChange();\n  //   expect(component.jobsList).toEqual(mockJobs);\n  //   // Search for 'Job 1'\n  //   component.searchForm.get('searchKeyword')?.setValue('Job 1');\n  //   component.onSearchInputChange();\n  //   expect(component.jobsList).toEqual([{ id: 1, position: 'Job 1' }]);\n  // });\n  // it('should call deleteEmployerJobPostings and update jobsList on deleteJob', () => {\n  //   const jobId = 1;\n  //   const mockResponse = 'Job deleted successfully';\n  //   employerService.deleteEmployerJobPostings.and.returnValue(of(mockResponse));\n  //   component.jobsList = [{ id: 1, position: 'Job 1' }, { id: 2, position: 'Job 2' }];\n  //   component.deleteJob(jobId);\n  //   expect(employerService.deleteEmployerJobPostings).toHaveBeenCalledWith(jobId);\n  //   expect(component.jobsList).toEqual([{ id: 2, position: 'Job 2' }]);\n  //   expect(toastrSpy.success).toHaveBeenCalledWith('Success' + mockResponse);\n  // });\n  // it('should show error toastr when deleteEmployerJobPostings API call fails', () => {\n  //   const jobId = 1;\n  //   const errorMessage = 'API error';\n  //   employerService.deleteEmployerJobPostings.and.returnValue(throwError({ message: errorMessage }));\n  //   component.deleteJob(jobId);\n  //   expect(toastrSpy.error).toHaveBeenCalledWith('Error occured' + errorMessage);\n  // });\n  // it('should navigate to update-job-posting on updateJob', () => {\n  //   const jobId = 1;\n  //   component.updateJob(jobId);\n  //   expect(router.navigate).toHaveBeenCalledWith(['update-job-posting']);\n  // });\n  // it('should navigate to employer-job-detail on showDetails', () => {\n  //   const jobId = 1;\n  //   component.showDetails(jobId);\n  //   expect(router.navigate).toHaveBeenCalledWith(['employer-job-detail']);\n  // });\n});","map":{"version":3,"sources":["/Users/nipunhedaoo/Documents/GitHub/Team_CodeBlooded_SOEN6011_Summer2023/career-service-app-client/src/app/employer-job-posting/employer-job-posting.component.spec.ts"],"names":["TestBed","EmployerJobsComponent","HttpClientTestingModule","RouterTestingModule","ToastrModule","EmployerService","BrowseJobsService","Router","of","describe","component","fixture","browseJobsService","employerService","router","toastrSpy","jasmine","createSpyObj","beforeEach","configureTestingModule","imports","forRoot","declarations","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","localStorage","setItem","JSON","stringify","userId","email","inject","mockJobs","content","getEmployerJobPostings","and","returnValue","ngOnInit","toHaveBeenCalled","jobsList","toEqual"],"mappings":"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","sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { EmployerJobsComponent } from './employer-job-posting.component';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { ToastrModule } from 'ngx-toastr';\nimport { EmployerService } from './employer-job-posting.service';\nimport { BrowseJobsService } from '../browse-jobs/browse-jobs.service';\nimport { Router } from '@angular/router';\nimport { of } from 'rxjs';\ndescribe('EmployerJobsComponent', () => {\n    let component;\n    let fixture;\n    let browseJobsService;\n    let employerService;\n    let router;\n    const toastrSpy = jasmine.createSpyObj('ToastrService', ['success', 'error']);\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            imports: [HttpClientTestingModule, RouterTestingModule, ToastrModule.forRoot(),],\n            declarations: [EmployerJobsComponent]\n        })\n            .compileComponents();\n    });\n    beforeEach(() => {\n        fixture = TestBed.createComponent(EmployerJobsComponent);\n        component = fixture.componentInstance;\n        fixture.detectChanges();\n    });\n    it('should create', () => {\n        expect(component).toBeTruthy();\n    });\n    beforeEach(() => {\n        localStorage.setItem('user', JSON.stringify({ userId: '123', email: 'test@example.com' }));\n        fixture = TestBed.createComponent(EmployerJobsComponent);\n        component = fixture.componentInstance;\n        browseJobsService = TestBed.inject(BrowseJobsService);\n        employerService = TestBed.inject(EmployerService);\n        router = TestBed.inject(Router);\n    });\n    it('should create', () => {\n        expect(component).toBeTruthy();\n    });\n    it('should retrieve all jobs on ngOnInit', () => {\n        const mockJobs = { content: [{\n                    \"description\": \"Work with frontend team to develop a highly scalable web app\",\n                    \"employerId\": \"64ad482c8eda5e12c342472e\",\n                    \"id\": \"64b5b8d3507b801b549c690d\",\n                    \"location\": \"Toronto / Montreal\",\n                    \"position\": \"Backend engineer\",\n                    \"requirements\": \"2+ years experience in any backend framework\",\n                },\n                {\n                    \"description\": \"Immediately joining\",\n                    \"employerId\": \"64ad482c8eda5e12c342472e\",\n                    \"id\": \"64b68289c653ef350e8de5d8\",\n                    \"location\": \"Toronto\",\n                    \"position\": \"sde 3\",\n                    \"requirements\": \"Java,AWS and CI/CD\"\n                }]\n        };\n        employerService.getEmployerJobPostings.and.returnValue(of(mockJobs));\n        component.ngOnInit();\n        expect(employerService.getEmployerJobPostings).toHaveBeenCalled();\n        expect(component.jobsList).toEqual(mockJobs.content);\n    });\n    // it('should show error toastr when getAllJobs API call fails', () => {\n    //   const errorMessage = 'API error';\n    //   browseJobsService.getAllJobs.and.returnValue(throwError({ message: errorMessage }));\n    //   component.ngOnInit();\n    //   expect(toastrSpy.error).toHaveBeenCalledWith('Error occured' + errorMessage);\n    // });\n    // it('should reset the search keyword and filter attribute on onFilterAttributeChange', () => {\n    //   component.searchForm.get('searchKeyword')?.setValue('searchValue');\n    //   component.onFilterAttributeChange();\n    //   expect(component.searchForm.get('searchKeyword')?.value).toBe('');\n    //   expect(component.jobsList).toEqual(component.jobsListOriginal);\n    // });\n    // it('should filter jobs on onSearchInputChange', () => {\n    //   const mockJobs = [{ id: 1, position: 'Job 1' }, { id: 2, position: 'Job 2' }];\n    //   component.jobsListOriginal = mockJobs;\n    //   component.onSearchInputChange();\n    //   expect(component.jobsList).toEqual(mockJobs);\n    //   // Search for 'Job 1'\n    //   component.searchForm.get('searchKeyword')?.setValue('Job 1');\n    //   component.onSearchInputChange();\n    //   expect(component.jobsList).toEqual([{ id: 1, position: 'Job 1' }]);\n    // });\n    // it('should call deleteEmployerJobPostings and update jobsList on deleteJob', () => {\n    //   const jobId = 1;\n    //   const mockResponse = 'Job deleted successfully';\n    //   employerService.deleteEmployerJobPostings.and.returnValue(of(mockResponse));\n    //   component.jobsList = [{ id: 1, position: 'Job 1' }, { id: 2, position: 'Job 2' }];\n    //   component.deleteJob(jobId);\n    //   expect(employerService.deleteEmployerJobPostings).toHaveBeenCalledWith(jobId);\n    //   expect(component.jobsList).toEqual([{ id: 2, position: 'Job 2' }]);\n    //   expect(toastrSpy.success).toHaveBeenCalledWith('Success' + mockResponse);\n    // });\n    // it('should show error toastr when deleteEmployerJobPostings API call fails', () => {\n    //   const jobId = 1;\n    //   const errorMessage = 'API error';\n    //   employerService.deleteEmployerJobPostings.and.returnValue(throwError({ message: errorMessage }));\n    //   component.deleteJob(jobId);\n    //   expect(toastrSpy.error).toHaveBeenCalledWith('Error occured' + errorMessage);\n    // });\n    // it('should navigate to update-job-posting on updateJob', () => {\n    //   const jobId = 1;\n    //   component.updateJob(jobId);\n    //   expect(router.navigate).toHaveBeenCalledWith(['update-job-posting']);\n    // });\n    // it('should navigate to employer-job-detail on showDetails', () => {\n    //   const jobId = 1;\n    //   component.showDetails(jobId);\n    //   expect(router.navigate).toHaveBeenCalledWith(['employer-job-detail']);\n    // });\n});\n"]},"metadata":{},"sourceType":"module"}