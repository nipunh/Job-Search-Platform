{"ast":null,"code":"import _asyncToGenerator from \"/Users/nipunhedaoo/Documents/GitHub/Team_CodeBlooded_SOEN6011_Summer2023/career-service-app-client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { EmployerJobDetailComponent } from './employer-job-details.component';\nimport { ToastrService } from 'ngx-toastr';\nimport { EmployerJobDetailService } from './employer-job-details.service';\nimport { CreateProfileService } from '../create-profile/create-profile.service';\nimport { of } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\ndescribe('EmployerJobDetailComponent', () => {\n  let component;\n  let fixture;\n  let service;\n  let routerSpy = {\n    navigate: jasmine.createSpy('navigate')\n  };\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [EmployerJobDetailComponent],\n      imports: [HttpClientTestingModule],\n      providers: [{\n        provide: Router,\n        useValue: routerSpy\n      }]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(EmployerJobDetailComponent);\n    component = fixture.componentInstance;\n    service = fixture.debugElement.injector.get(EmployerJobDetailService);\n    fixture.detectChanges();\n  });\n  it('should fetch job details and candidate list on component initialization', fakeAsync(() => {\n    const jobService = TestBed.inject(EmployerJobDetailService);\n    const toastrService = TestBed.inject(ToastrService);\n    const currentJobId = \"64b5b8d3507b801b549c690d\";\n    const userId = \"64b739ff584291261ac7abdb\";\n    const jobDetails = {\n      \"id\": \"64b5b8d3507b801b549c690d\",\n      \"employerId\": \"64ad482c8eda5e12c342472e\",\n      \"position\": \"Backend engineer\",\n      \"description\": \"Work with frontend team to develop a highly scalable web app\",\n      \"location\": \"Toronto / Montreal\",\n      \"requirements\": \"2+ years experience in any backend framework\"\n    };\n    const candidateList = {\n      \"candidates\": [{\n        \"candidate\": {\n          \"userId\": \"64b739ff584291261ac7abdb\",\n          \"emailId\": \"nipun@test.com\",\n          \"password\": \"password\",\n          \"authority\": \"ROLE_CANDIDATE\",\n          \"firstName\": \"Nipun\",\n          \"lastName\": \"Hedaoo\",\n          \"education\": \"Masters\",\n          \"experience\": 2,\n          \"resumeId\": \"64bfcf6b2a2e1d293682c4e1\"\n        },\n        \"applicationStatus\": \"OFFER\"\n      }, {\n        \"candidate\": {\n          \"userId\": \"64bfe970407a20743e859960\",\n          \"emailId\": \"manan.paruthi@gmail.com\",\n          \"password\": \"abcd1234\",\n          \"authority\": \"ROLE_CANDIDATE\",\n          \"firstName\": \"Manan\",\n          \"lastName\": \"Paruthi\",\n          \"education\": \"Masters\",\n          \"experience\": 4,\n          \"resumeId\": \"64bfe9d3407a20743e859961\"\n        },\n        \"applicationStatus\": \"OFFER\"\n      }, {\n        \"candidate\": {\n          \"userId\": \"64c00168565fef0c01c01a5b\",\n          \"emailId\": \"ashwinr@gmail.com\",\n          \"password\": \"password123\",\n          \"authority\": \"ROLE_CANDIDATE\",\n          \"firstName\": \"ashwin\",\n          \"lastName\": \"r\",\n          \"education\": \"phd\",\n          \"experience\": 3,\n          \"resumeId\": \"64c00208565fef0c01c01a5c\"\n        },\n        \"applicationStatus\": \"REJECTED\"\n      }, {\n        \"candidate\": {\n          \"userId\": \"64cc03ef7720fa27e5ef6bdb\",\n          \"emailId\": \"mananparuthi@gmail.com\",\n          \"password\": \"password1234\",\n          \"authority\": \"ROLE_CANDIDATE\",\n          \"firstName\": \"Manan\",\n          \"lastName\": \"Paruthi\",\n          \"education\": \"Masters in Computer Science\",\n          \"experience\": 4,\n          \"resumeId\": \"64ce445ebfd1bd160a0e9edf\"\n        },\n        \"applicationStatus\": \"INTERVIEW\"\n      }]\n    };\n    jobService.getJobPostingsDetails.and.returnValue(of(jobDetails));\n    jobService.getCandidateListForCurrentJob.and.returnValue(of(candidateList));\n    component.ngOnInit();\n    tick();\n    expect(component.job).toEqual(jobDetails);\n    expect(component.candidateList).toEqual(candidateList.candidates);\n    expect(jobService.getJobPostingsDetails).toHaveBeenCalledWith(currentJobId);\n    expect(jobService.getCandidateListForCurrentJob).toHaveBeenCalledWith(userId, currentJobId);\n    expect(toastrService.error).not.toHaveBeenCalled();\n  }));\n  it('should download the resume when calling downloadResume', fakeAsync(() => {\n    const userId = \"64b739ff584291261ac7abdb\";\n    const resumeBlob = new Blob(['PDF content'], {\n      type: 'application/pdf'\n    });\n    const createProfileService = TestBed.inject(CreateProfileService);\n    const createObjectURLSpy = spyOn(window.URL, 'createObjectURL').and.returnValue('mock-url');\n    const linkClickSpy = spyOn(document.createElement('a'), 'click');\n    createProfileService.downloadResume.and.returnValue(of(resumeBlob));\n    component.downloadResume(userId);\n    tick();\n    expect(createObjectURLSpy).toHaveBeenCalledWith(resumeBlob);\n    expect(linkClickSpy).toHaveBeenCalled(); // expect(toastrService.error).not.toHaveBeenCalled();\n  }));\n});","map":{"version":3,"sources":["/Users/nipunhedaoo/Documents/GitHub/Team_CodeBlooded_SOEN6011_Summer2023/career-service-app-client/src/app/employer-job-details/employer-job-details.component.spec.ts"],"names":["TestBed","fakeAsync","tick","EmployerJobDetailComponent","ToastrService","EmployerJobDetailService","CreateProfileService","of","Router","HttpClientTestingModule","describe","component","fixture","service","routerSpy","navigate","jasmine","createSpy","beforeEach","configureTestingModule","declarations","imports","providers","provide","useValue","compileComponents","createComponent","componentInstance","debugElement","injector","get","detectChanges","it","jobService","inject","toastrService","currentJobId","userId","jobDetails","candidateList","getJobPostingsDetails","and","returnValue","getCandidateListForCurrentJob","ngOnInit","expect","job","toEqual","candidates","toHaveBeenCalledWith","error","not","toHaveBeenCalled","resumeBlob","Blob","type","createProfileService","createObjectURLSpy","spyOn","window","URL","linkClickSpy","document","createElement","downloadResume"],"mappings":"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","sourcesContent":["import { TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { EmployerJobDetailComponent } from './employer-job-details.component';\nimport { ToastrService } from 'ngx-toastr';\nimport { EmployerJobDetailService } from './employer-job-details.service';\nimport { CreateProfileService } from '../create-profile/create-profile.service';\nimport { of } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\ndescribe('EmployerJobDetailComponent', () => {\n    let component;\n    let fixture;\n    let service;\n    let routerSpy = { navigate: jasmine.createSpy('navigate') };\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            declarations: [EmployerJobDetailComponent],\n            imports: [\n                HttpClientTestingModule,\n            ],\n            providers: [{ provide: Router, useValue: routerSpy }],\n        })\n            .compileComponents();\n    });\n    beforeEach(() => {\n        fixture = TestBed.createComponent(EmployerJobDetailComponent);\n        component = fixture.componentInstance;\n        service = fixture.debugElement.injector.get(EmployerJobDetailService);\n        fixture.detectChanges();\n    });\n    it('should fetch job details and candidate list on component initialization', fakeAsync(() => {\n        const jobService = TestBed.inject(EmployerJobDetailService);\n        const toastrService = TestBed.inject(ToastrService);\n        const currentJobId = \"64b5b8d3507b801b549c690d\";\n        const userId = \"64b739ff584291261ac7abdb\";\n        const jobDetails = { \"id\": \"64b5b8d3507b801b549c690d\", \"employerId\": \"64ad482c8eda5e12c342472e\", \"position\": \"Backend engineer\", \"description\": \"Work with frontend team to develop a highly scalable web app\", \"location\": \"Toronto / Montreal\", \"requirements\": \"2+ years experience in any backend framework\" };\n        const candidateList = {\n            \"candidates\": [\n                { \"candidate\": { \"userId\": \"64b739ff584291261ac7abdb\", \"emailId\": \"nipun@test.com\", \"password\": \"password\", \"authority\": \"ROLE_CANDIDATE\", \"firstName\": \"Nipun\", \"lastName\": \"Hedaoo\", \"education\": \"Masters\", \"experience\": 2, \"resumeId\": \"64bfcf6b2a2e1d293682c4e1\" }, \"applicationStatus\": \"OFFER\" },\n                { \"candidate\": { \"userId\": \"64bfe970407a20743e859960\", \"emailId\": \"manan.paruthi@gmail.com\", \"password\": \"abcd1234\", \"authority\": \"ROLE_CANDIDATE\", \"firstName\": \"Manan\", \"lastName\": \"Paruthi\", \"education\": \"Masters\", \"experience\": 4, \"resumeId\": \"64bfe9d3407a20743e859961\" }, \"applicationStatus\": \"OFFER\" },\n                { \"candidate\": { \"userId\": \"64c00168565fef0c01c01a5b\", \"emailId\": \"ashwinr@gmail.com\", \"password\": \"password123\", \"authority\": \"ROLE_CANDIDATE\", \"firstName\": \"ashwin\", \"lastName\": \"r\", \"education\": \"phd\", \"experience\": 3, \"resumeId\": \"64c00208565fef0c01c01a5c\" }, \"applicationStatus\": \"REJECTED\" },\n                { \"candidate\": { \"userId\": \"64cc03ef7720fa27e5ef6bdb\", \"emailId\": \"mananparuthi@gmail.com\", \"password\": \"password1234\", \"authority\": \"ROLE_CANDIDATE\", \"firstName\": \"Manan\", \"lastName\": \"Paruthi\", \"education\": \"Masters in Computer Science\", \"experience\": 4, \"resumeId\": \"64ce445ebfd1bd160a0e9edf\" }, \"applicationStatus\": \"INTERVIEW\" }\n            ]\n        };\n        jobService.getJobPostingsDetails.and.returnValue(of(jobDetails));\n        jobService.getCandidateListForCurrentJob.and.returnValue(of(candidateList));\n        component.ngOnInit();\n        tick();\n        expect(component.job).toEqual(jobDetails);\n        expect(component.candidateList).toEqual(candidateList.candidates);\n        expect(jobService.getJobPostingsDetails).toHaveBeenCalledWith(currentJobId);\n        expect(jobService.getCandidateListForCurrentJob).toHaveBeenCalledWith(userId, currentJobId);\n        expect(toastrService.error).not.toHaveBeenCalled();\n    }));\n    it('should download the resume when calling downloadResume', fakeAsync(() => {\n        const userId = \"64b739ff584291261ac7abdb\";\n        const resumeBlob = new Blob(['PDF content'], { type: 'application/pdf' });\n        const createProfileService = TestBed.inject(CreateProfileService);\n        const createObjectURLSpy = spyOn(window.URL, 'createObjectURL').and.returnValue('mock-url');\n        const linkClickSpy = spyOn(document.createElement('a'), 'click');\n        createProfileService.downloadResume.and.returnValue(of(resumeBlob));\n        component.downloadResume(userId);\n        tick();\n        expect(createObjectURLSpy).toHaveBeenCalledWith(resumeBlob);\n        expect(linkClickSpy).toHaveBeenCalled();\n        // expect(toastrService.error).not.toHaveBeenCalled();\n    }));\n});\n"]},"metadata":{},"sourceType":"module"}